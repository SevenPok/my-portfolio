---
import { languages } from "@/i18n/ui";
import { getLangFromUrl } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
---

<div class="relative inline-block text-left">
  <button
    type="button"
    class="inline-flex items-center gap-2 rounded-lg bg-gray-100 dark:bg-gray-800 px-4 py-2 text-sm font-medium text-gray-900 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all cursor-pointer"
    id="language-menu-button"
    aria-expanded="false"
    aria-haspopup="true"
  >
    üåê
    <span>{languages[lang] || languages["en"]}</span>
    <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path
        fill-rule="evenodd"
        d="M5.23 7.21a.75.75 0 011.06.02L10 11.17l3.71-3.94a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
        clip-rule="evenodd"></path>
    </svg>
  </button>

  <div
    id="language-menu"
    class="absolute right-0 z-20 mt-2 w-44 rounded-lg bg-white dark:bg-gray-800 shadow-lg ring-1 ring-gray-200 dark:ring-gray-600 transform opacity-0 scale-95 pointer-events-none transition duration-200 ease-out"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
  >
    <div class="py-1">
      {
        Object.entries(languages).map(([code, label]) => (
          <a
            href={`/${code}`}
            class="flex items-center gap-2 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-blue-600 dark:hover:text-blue-400 transition-colors language-link"
            role="menuitem"
            data-lang={code}
          >
            <svg
              class="w-4 h-4 text-gray-400 dark:text-gray-500"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <circle cx="12" cy="12" r="10" />
              <path d="M8 12h8M12 8v8" />
            </svg>
            {label}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const button = document.getElementById("language-menu-button");
    const menu = document.getElementById("language-menu");

    button?.addEventListener("click", (e) => {
      e.stopPropagation(); // Prevent click from closing immediately
      const isExpanded = button?.getAttribute("aria-expanded") === "true";
      button?.setAttribute("aria-expanded", (!isExpanded).toString());

      menu?.classList.toggle("opacity-100", !isExpanded);
      menu?.classList.toggle("scale-100", !isExpanded);
      menu?.classList.toggle("opacity-0", isExpanded);
      menu?.classList.toggle("scale-95", isExpanded);
      menu?.classList.toggle("pointer-events-none", isExpanded);
    });

    // Handle language links to preserve hash
    const languageLinks = document.querySelectorAll(".language-link");
    languageLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetLang = link.getAttribute("data-lang");
        const currentHash = window.location.hash;

        // Navigate to the new language URL with the current hash
        window.location.href = `/${targetLang}${currentHash}`;
      });
    });

    document.addEventListener("click", (e) => {
      const isClickOutside = !button?.contains(e.target as Node) && !menu?.contains(e.target as Node);
      if (isClickOutside) {
        button?.setAttribute("aria-expanded", "false");
        menu?.classList.add("opacity-0", "scale-95", "pointer-events-none");
        menu?.classList.remove("opacity-100", "scale-100");
      }
    });
  });
</script>
