---
import ToggleTheme from "./ToggleTheme.astro";

const menuItems = [
  { name: "Acerca de mi", id: "about" },
  { name: "Habilidades", id: "skills" },
  { name: "Proyectos", id: "projects" },
  { name: "Experiencia", id: "experience" },
];
---

<nav class="w-full bg-white/80 dark:bg-gray-900/80 backdrop-blur-md z-50 shadow-sm fixed top-0">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="#about" class="text-xl font-bold text-gray-800 dark:text-white"> Gerber Colindres </a>

      <!-- Menú desktop -->
      <div class="hidden lg:flex space-x-8">
        {
          menuItems.map((item) => (
            <a
              href={`#${item.id}`}
              class="text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 transition-colors"
              data-id={item.id}
            >
              {item.name}
            </a>
          ))
        }
      </div>

      <!-- Menu mobil -->
      <div class="flex items-center space-x-4">
        <div
          id="theme-toggle"
          class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors cursor-pointer"
        >
          <ToggleTheme />
        </div>
        <!-- Botón móvil -->
        <button id="mobile-menu-button" class="lg:hidden p-2 text-gray-600 dark:text-gray-300" aria-label="Abrir menú">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Overlay para el sidebar -->
  <div id="sidebar-overlay" class="fixed inset-0 bg-black/60 z-40 hidden lg:hidden h-svh" aria-hidden="true"></div>

  <!-- Sidebar móvil -->
  <div
    id="mobile-sidebar"
    class="fixed top-0 left-0 w-72 h-screen bg-white dark:bg-gray-900 shadow-xl transform -translate-x-full transition-transform duration-300 ease-in-out z-50 lg:hidden flex flex-col"
  >
    <div class="flex justify-between items-center p-5 border-b dark:border-gray-700">
      <span class="text-xl font-bold text-gray-800 dark:text-white">Menú</span>
      <button
        id="close-sidebar"
        class="p-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="flex-1 px-5 py-8">
      <div class="space-y-1">
        {
          menuItems.map((item) => (
            <a
              href={`#${item.id}`}
              class="block py-4 px-3 text-base font-medium text-gray-800 dark:text-gray-200 hover:bg-blue-50 dark:hover:bg-blue-900/30 hover:text-blue-600 dark:hover:text-blue-400 rounded-lg transition-all duration-200"
              data-id={item.id}
            >
              {item.name}
            </a>
          ))
        }
      </div>
    </div>
    <div class="p-5 border-t dark:border-gray-700">
      <div class="flex items-center justify-center"></div>
    </div>
  </div>
</nav>

<script>
  // Script para manejar el sidebar móvil
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button") as HTMLButtonElement | null;
    const closeSidebarButton = document.getElementById("close-sidebar") as HTMLButtonElement | null;
    const sidebar = document.getElementById("mobile-sidebar") as HTMLDivElement | null;
    const overlay = document.getElementById("sidebar-overlay") as HTMLDivElement | null;
    const menuLinks = sidebar?.querySelectorAll<HTMLAnchorElement>('a[href^="#"]') || [];
    const sidebarThemeToggle = document.getElementById("sidebar-theme-toggle") as HTMLDivElement | null;
    const mainThemeToggle = document.getElementById("theme-toggle") as HTMLDivElement | null;

    // Función para abrir el sidebar
    const openSidebar = () => {
      sidebar?.classList?.remove("-translate-x-full");
      sidebar?.classList?.add("translate-x-0");
      overlay?.classList.remove("hidden");
      document.body.classList.add("overflow-hidden"); // Previene el scroll del body
    };

    // Función para cerrar el sidebar
    const closeSidebar = () => {
      sidebar?.classList.remove("translate-x-0");
      sidebar?.classList?.add("-translate-x-full");
      overlay?.classList?.add("hidden");
      document.body.classList.remove("overflow-hidden");
    };

    // Event listeners
    mobileMenuButton?.addEventListener("click", openSidebar);
    closeSidebarButton?.addEventListener("click", closeSidebar);

    // Cerrar el menú cuando se hace clic en el overlay (fuera del menú)
    overlay?.addEventListener("click", (e: MouseEvent) => {
      // Asegurarse de que el clic fue directamente en el overlay y no en un elemento hijo
      if (e.target === overlay) {
        closeSidebar();
      }
    });

    // Cerrar el menú cuando se hace clic en cualquier parte fuera del sidebar
    document.addEventListener("click", (e: MouseEvent) => {
      const target = e.target as Node;
      // Comprobar si el sidebar está abierto y si el clic fue fuera del sidebar
      if (
        sidebar &&
        !sidebar.classList.contains("-translate-x-full") &&
        sidebar !== target &&
        !sidebar.contains(target) &&
        mobileMenuButton !== target &&
        (mobileMenuButton ? !mobileMenuButton.contains(target) : true)
      ) {
        closeSidebar();
      }
    });

    // Sincronizar el toggle de tema en el sidebar con el principal
    if (sidebarThemeToggle && mainThemeToggle) {
      sidebarThemeToggle.addEventListener("click", () => {
        // Disparar un clic en el toggle principal
        mainThemeToggle.click();
      });
    }

    // Cerrar sidebar cuando se hace clic en un enlace del menú
    menuLinks.forEach((link) => {
      link.addEventListener("click", closeSidebar);
    });

    // Cerrar sidebar cuando se presiona la tecla Escape
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape" && sidebar && !sidebar.classList.contains("-translate-x-full")) {
        closeSidebar();
      }
    });
  });
</script>
